var request = require('request');
var promise = require('bluebird');
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var OAuthApiTokenResponse = (function () {
    function OAuthApiTokenResponse() {
    }
    return OAuthApiTokenResponse;
})();
exports.OAuthApiTokenResponse = OAuthApiTokenResponse;
var OAuthPasswordTokenResponse = (function () {
    function OAuthPasswordTokenResponse() {
    }
    return OAuthPasswordTokenResponse;
})();
exports.OAuthPasswordTokenResponse = OAuthPasswordTokenResponse;
var TestResponse = (function () {
    function TestResponse() {
    }
    return TestResponse;
})();
exports.TestResponse = TestResponse;
var ErrorResponse = (function () {
    function ErrorResponse() {
    }
    return ErrorResponse;
})();
exports.ErrorResponse = ErrorResponse;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
})();
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
})();
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        // TODO: support oauth
    };
    return OAuth;
})();
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
})();
var TestApi = (function () {
    function TestApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://localhost/v1';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2': new OAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    TestApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    TestApi.prototype.test = function (name) {
        var path = this.url + this.basePath + '/test';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    TestApi.prototype.testScopeProtected = function (authorization, name) {
        var path = this.url + this.basePath + '/testScopeProtected';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is set
        if (!authorization) {
            throw new Error('Missing required parameter authorization when calling testScopeProtected');
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.oauth2.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return TestApi;
})();
exports.TestApi = TestApi;
var TokenApi = (function () {
    function TokenApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://localhost/v1';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth(),
            'oauth2': new OAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    TokenApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    TokenApi.prototype.apiToken = function (authorization, grantType, scope) {
        var path = this.url + this.basePath + '/oauth/apiToken';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is set
        if (!authorization) {
            throw new Error('Missing required parameter authorization when calling apiToken');
        }
        // verify required parameter 'grantType' is set
        if (!grantType) {
            throw new Error('Missing required parameter grantType when calling apiToken');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        if (grantType !== undefined) {
            formParams['grant_type'] = grantType;
        }
        if (scope !== undefined) {
            formParams['scope'] = scope;
        }
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    TokenApi.prototype.passwordToken = function (username, password, scope) {
        var path = this.url + this.basePath + '/oauth/passwordToken';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'username' is set
        if (!username) {
            throw new Error('Missing required parameter username when calling passwordToken');
        }
        // verify required parameter 'password' is set
        if (!password) {
            throw new Error('Missing required parameter password when calling passwordToken');
        }
        var useFormData = false;
        if (username !== undefined) {
            formParams['username'] = username;
        }
        if (password !== undefined) {
            formParams['password'] = password;
        }
        if (scope !== undefined) {
            formParams['scope'] = scope;
        }
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return TokenApi;
})();
exports.TokenApi = TokenApi;
//# sourceMappingURL=securityService.js.map